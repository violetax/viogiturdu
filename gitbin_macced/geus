#!/bin/bash

function whatis() {
	cuseco=$(basename $0)
	echo -e "\033[38;5;118m${cuseco} ⇒  \033[38;5;11mtype:\033[38;5;118mTrabajar mi audio, meca y cali ⇒  sin paradigma, solo instrucciones"
	echo -e "\033[38;5;195m de momento \033[38;5;11m⭐ it will improve \033[38;5;11m⭐ \033[38;5;195m con paradigma \033[38;5;212m OBJECT ORIENTED XCRIVVING ❤️️ 
	\033[38;5;43m\t👉\t\033[38;5;11m${cuseco} -$o\033[0m"
}

source Asksure.fu
source Continua.fu
source Opte.fu
source Creocle.fu
source Geus.getsecsofclip.fu

gvallwaysfile=/Users/violetagonzalezgarcia/gitclones/bin/geush/auxiliares/vallways/geus-vallways.aux
source ${gvallwaysfile} 
gvonthegofile=/Users/violetagonzalezgarcia/gitclones/bin/geush/auxiliares/vonthego/geus-vonthego.aux

#source ${funcsdir}/do_a_playlist.fu
source ${funcsdir}/echonthego.fu
source ${funcsdir}/editvlcrc.fu
source ${funcsdir}/erabaki_hizkuntza.fu
source ${funcsdir}/lofaudio.fu
source ${funcsdir}/lofcli.fu
#source ${funcsdir}/loop_ffmpeg.fu
source ${funcsdir}/rename_clip_get_seconds_mk_fragments_dirs.fu
source ${funcsdir}/createalangbase.fu
source ${funcsdir}/removingFromgeus.fu

function threeLittlePigs() {
	lofcli
	lofclipname="${clipsdir}/${lofclipname}"
	rename_clip_get_seconds_mk_fragments_dirs ${lofclipname}
}

while getopts ":ehlr" o; do
	case "${o}" in
		e)
			opte
			exit
			;;
		h)
			whatis
			exit
			;;
		l)
			[[ $2 ]] && lengua=$2
			createalangbase ${lengua}  
			exit
			;;
		r)
			removingFromgeus
			exit
			;;
		\?)
			echo "invalid option: -$OPTARG"
			exit
			;;
	esac
done
shift $((OPTIND-1))

# MAIN
[[ -f ${gvonthegofile} ]] && rm ${gvonthegofile} && vim -c "wq"  ${gvonthegofile} ||  vim -c "wq"  ${gvonthegofile}   
erabaki_hizkuntza #choose language == set paths && config vlc
# el paradigma de las funciones, con scriptiong no va → do_a_playlist 
# ${camindir}/select_url_to_brave_to_the_clip.sh → termina con prepworked clip √
# ${camindir}/select_audio_to_vlc_and_clip_it.sh → termina con prepworked clip √ 
# ${camindir}/select_a_clip_to_playlist_it.sh → termina con prepworked clip √

select_options=()

for plain in $(find ${plainsdir} -name do_a_pl_* -exec basename {} \; | sort )
do
	optfile=$(echo "${plain:10: -6}" | tr '-' ' ' | sed -e 's/^\(.\)/\U\1\L'/)
	select_options+=( "${optfile}" ) 
done

COLUMNS=12
select opt in "${select_options[@]}"
do
	case $REPLY in 
		1)
			echo -e "💥 \033[38;5;14mAhora elijo \033[38;5;118murl\033[38;5;14m, y se abre \033[38;5;212mbrave \033[38;5;14mcon ella, 👉\033[38;5;195m save an mp3 to \033[38;5;118m${audir} \033[38;5;195m\n"     
			urlf="https://www.eitb.eus/eu/irratia/euskadi-irratia/programak/faktoria/"
			urlg="https://www.eitb.eus/eu/irratia/euskadi-irratia/programak/goizak-gaur/"
			select url in ${urlf} ${urlg}; do
				[[ ! -z ${url} ]] && brave-browser ${url} 2>/dev/null && break
			done
			continua
			lofaudio
			banaudio=$(basename ${audio})
			echo -e "\033[38;5;195m★ this is the \033[38;5;118maudio \033[38;5;11m→ ${banaudio}"
			echo -e "\t⌛ \033[38;5;195mclip it\033[38;5;118m...\033[38;5;195m??\033[38;5;208m If \033[38;5;9m\`ez\`\033[38;5;208m, then 🔥\033[38;5;11mfull audio🔥\033[38;5;208m will be playlisted ⚡⚡⚡"
			if asksure; then
				echo -e "\033[38;5;118m ⭐ aurrera eta ⇒ "  
				vlc ${audio} 2>/dev/null
				threeLittlePigs #de aquí sale EL CLIP
			else
				echo -e "\033[38;5;9mez eta⇒  \033[38;5;195mprepping \033[38;5;118m${banaudio} \033[38;5;195mas clip → "
				rename_clip_get_seconds_mk_fragments_dirs ${banaudio} #de aquí sale EL CLIP
			fi
			;;
		2)
			echo -e "👉 \033[38;5;195mSelect el \033[38;5;118mmp3 \033[38;5;195mentre los \033[38;5;118maudios \033[38;5;195mde \033[38;5;118m${lengua} \033[38;5;195m⇒  \033[38;5;208m vlc \033[38;5;195mwill open for 💕\033[38;5;11m me \033[38;5;195m⚡ to clip it \033[38;5;208m -- it'll go to \033[38;5;11m ${inputrecordpath} \033[38;5;208mwhich is both \033[38;5;11mvlc-input-record-path \033[38;5;208mand \033[38;5;11mclipsdir 💥 \033[38;5;195m"
			COLUMNS=12
			select fpaudio in $(find ${audir} -name *mp3 -exec basename {} \; | sort -r ) #TODO limitar para cuando haya muchos ... | head -7 )	
			do
				audio=${audir}/${fpaudio}
				vlc ${audio} 2>/dev/null
				break
			done
			threeLittlePigs #de aquí sale EL CLIP
			;;
		3)
			COLUMNS=12
			select aclip in $(find ${clipsdir} -name *mp3 -exec basename {} \; | sort -r ) #TODO limitar para cuando haya muchos ... | head -7 )	
			do
				selected_mp3_fp=${clipsdir}/${aclip} # clip = /pathto/selected.file.mp3 → $1 para las funciones
				rename_clip_get_seconds_mk_fragments_dirs ${selected_mp3_fp} #de aquí sale EL CLIP
				break
			done
			;;
	esac #de cualquiera de los 3 casos → sale EL CLIP
	break
done


loopdlog="${logsdir}/.${clipname%.mp3}-dictation-loop.log"
loopllog="${logsdir}/.${clipname%.mp3}-listening-loop.log"

nameofclipsprefix="segbat-"
lengthoffragment="3"
factorreductionfragment="1"
let controltime=60-${factorreductionfragment}
let t=0
let tm=0


for (( i=1; i<=${loa}  ; i++ )); do
    ffmpeg -i ${clip} -acodec copy -t 00:00:${lengthoffragment} -ss 00:${tm}:${t} ${thisclipfragdsdir}/${nameofclipsprefix}${i}.mp3 2> ${loopdlog}
    if [ ${t} -lt ${controltime} ]; then
        let t=${t}+${factorreductionfragment}
    else
        let t=0
        let tm=${tm}+1
    fi
	let totalnumfrags=${i}  
done
for frag in $(ls ${thisclipfragdsdir}/*mp3)
do
	mv ${frag} ${frag%.mp3}_${totalnumfrags}.mp3
done	

ffmpeg -i ${clip} -f segment -segment_time 3 -c copy ${thisclipfraglsdir}/${nameofclipsprefix}%03d_${totalnumfrags}.mp3 2> ${loopllog}

#OVERLAP
	playoverlap=${thisclipfragdsdir}/allfiles-playoverlap.tmp 
    find  ${thisclipfragdsdir} -maxdepth 1 -type f -name "*[^\(tmp\)]" > ${playoverlap}
#STRAIGHT
	playstraigth=${thisclipfraglsdir}/allfiles-playstraigth.tmp 
    find ${thisclipfraglsdir} -maxdepth 1 -type f -name "*[^\(tmp\)]" > ${playstraigth}


echo -e "⭐⭐ ⭐ ⭐ ⭐ \033[38;5;118m Geusing 🚀🚀🚀🚀"
for pl in ${playoverlap} ${playstraigth}
do
	cd ${playldir} 
	sort -V ${pl} -o ${pl}.SORTED
	#sed -i '' "s/.mp3/_${totalnumfrags}.mp3/" ${pl}.SORTED  
	mv ${pl}.SORTED ${pl}
	if [[ ${pl} =~ "overlap" ]]; then
		awk '{print $0"\n"$0}' ${pl} > ${pl}_doubled && mv ${pl}_doubled ${pl}
		sed -i '' "s?^?<track><location>file://?" ${pl}
		plname=pl-dictation_${clipname%.mp3}.xspf
	else
		sed -i '' "s?^?<track><location>file://?" ${pl}
		plname=pl-listen_${clipname%.mp3}.xspf
	fi
	sed -i '' 's?$?</location></track>?' ${pl}
	sed -i '' '$a\</trackList>\n</playlist>' ${pl}
	cat ${xmlheaderfile} ${pl} > ${plname}
	echo -e "\033[38;5;195m"
	realpath ${plname}
	steps=$(cat ${plname} | grep "^<track><location>" | wc -l )
	dtime=$(bc <<< "scale=2;${steps}*3/60") #ATCHUNG → el operadpr debe ser <<< NOT single <, pero aveces coon <<< el vim syntax se vuelve loco
	echo -e "\033[38;5;215m🐒 geused 🐒\033[38;5;195m ⇒  TIME → ${dtime} ⌛ \033[0m " | tee  ${plogfile}
	echo -e "<!--TIME → ${dtime} -->" >> ${plname}
	echo -e "${plname} \n ${dtime} \n ##" >> ${plogfile}
done
