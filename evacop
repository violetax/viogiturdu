#!/bin/bash
#source Asksure.fu
source Opte.fu

#SCRIPT VARIABLES 
recursive=false
whichfunc=vim_gcc_execute_continue

# GETOPS
while getopts ":ehcrw" o; do
    case "${o}" in
		e)
            opte
            exit
            ;;

        h)
            whatis
            exit
            ;;
		r)
			recursive=true
			;;
		w)
			whichfunc=solo_gcc_execute_continue
			;;
        \?)
            echo "invalid option: -$OPTARG"
            exit
            ;;
    esac
done
shift $((OPTIND-1))

#for f in $(find . -name "*c"); do ed -i '' "12s/^/#include <stdio.h>/" $f; done


#SCRIPT FUNCTIONS
#source Continua.fu
function continua() {
	echo -e "\033[38;5;195m" 
    read -n 1 -r -s -p $'ðŸ‘‰ PULSA CUALQUIER LETRA PARA CONTINUAR!! ðŸ’« \n'
    echo -e "\033[0m" 
}

function whatis() {
	echo -e "\033[38;5;195m run vim, gcc & a.out on \033[38;5;11m\$1\033[38;5;195m ,\033[38;5;9mpero \033[38;5;195msi \033[38;5;11m\$1 \033[38;5;195mes \033[38;5;118mr \033[38;5;195m, entonces se lanzan los 3 pasos sobre todos los c files en el pwd âš¡ "
}	
 
function vim_gcc_execute_continue() {
	which_cfile=$1
	vim ${which_cfile}  
	continua
	gcc -fsanitize=address -g3 -Wall -Wextra -Werror ${which_cfile}
	#TODO : ejecutar a.out solo si gcc no da errores
	# si no es recursivo, con poner un statement continua, suficiente
	# en recursivo, TODO
#	echo -e "ggc ret â†’ $?"
	./a.out
	continua
	clear
}
function solo_gcc_execute_continue() {
	which_cfile=$1
	gcc -fsanitize=address -g3 -Wall -Wextra -Werror ${which_cfile}
	#TODO : ejecutar a.out solo si gcc no da errores
	# si no es recursivo, con poner un statement continua, suficiente
	# en recursivo, TODO
	./a.out 
	continua
	clear
}

which_cfile=$1
# MAIN
if [[ ${recursive} == true ]]
then
	for cfile in $(find . -name "*c")
	do
		${whichfunc} ${cfile}  
	done
else
	${whichfunc} ${which_cfile} 
fi	


